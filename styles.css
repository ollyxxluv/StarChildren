@font-face {
    font-family: 'CoolveticaCondensedRg-Regular';
    src: url(fonts/CoolveticaCondensedRg-Regular.woff2) format('woff2');
    font-weight: 400;
    font-style: normal;
    font-display: swap;
}
@font-face {
    font-family: 'NexaScript-Light';
    src: url(fonts/NexaScript-Light.woff2) format('woff2');
    font-weight: 400;
    font-style: normal;
    font-display: swap;
}
@font-face {
    font-family: 'Unbounded-Bold';
    src: url(fonts/Unbounded-Bold.woff2) format('woff2');
    font-weight: 700;
    font-style: normal;
    font-display: swap;
}
@font-face {
    font-family: 'Unbounded-Light';
    src: url(fonts/Unbounded-Light.woff2) format('woff2');
    font-weight: 300;
    font-style: normal;
    font-display: swap;
}
@font-face {
    font-family: 'Unbounded-Medium';
    src: url(fonts/Unbounded-Medium.woff2) format('woff2');
    font-weight: 500;
    font-style: normal;
    font-display: swap;
}
@font-face {
    font-family: 'Unbounded-Regular';
    src: url(fonts/Unbounded-Regular.woff2) format('woff2');
    font-weight: 400;
    font-style: normal;
    font-display: swap;
}

/**
  Нормализация блочной модели
 */
 *,
 ::before,
 ::after {
   box-sizing: border-box;
 }
 
 /**
   Убираем внутренние отступы слева тегам списков,
   у которых есть атрибут class
  */
 :where(ul, ol):where([class]) {
   padding-left: 0;
 }
 
 /**
   Убираем внешние отступы body и двум другим тегам,
   у которых есть атрибут class
  */
 body,
 :where(blockquote, figure):where([class]) {
   margin: 0;
 }
 
 /**
   Убираем внешние отступы вертикали нужным тегам,
   у которых есть атрибут class
  */
 :where(
   h1,
   h2,
   h3,
   h4,
   h5,
   h6,
   p,
   ul,
   ol,
   dl
 ):where([class]) {
   margin-block: 0;
 }
 
 :where(dd[class]) {
   margin-left: 0;
 }
 
 :where(fieldset[class]) {
   margin-left: 0;
   padding: 0;
   border: none;
 }
 
 /**
   Убираем стандартный маркер маркированному списку,
   у которого есть атрибут class
  */
 :where(ul[class]) {
   list-style: none;
 }
 
 :where(address[class]) {
   font-style: normal;
 }
 
 /**
   Обнуляем вертикальные внешние отступы параграфа,
   объявляем локальную переменную для внешнего отступа вниз,
   чтобы избежать взаимодействие с более сложным селектором
  */
 p {
   --paragraphMarginBottom: 24px;
 
   margin-block: 0;
 }
 
 /**
   Внешний отступ вниз для параграфа без атрибута class,
   который расположен не последним среди своих соседних элементов
  */
 p:where(:not([class]):not(:last-child)) {
   margin-bottom: var(--paragraphMarginBottom);
 }
 
 
 /**
   Упрощаем работу с изображениями и видео
  */
 img,
 video {
   display: block;
   max-width: 100%;
   height: auto;
 }
 
 /**
   Наследуем свойства шрифт для полей ввода
  */
 input,
 textarea,
 select,
 button {
   font: inherit;
 }
 
 html {
   /**
     Пригодится в большинстве ситуаций
     (когда, например, нужно будет "прижать" футер к низу сайта)
    */
   height: 100%;
   /**
     Убираем скачок интерфейса по горизонтали
     при появлении / исчезновении скроллбара
    */
   scrollbar-gutter: stable;
 }
 
 /**
   Плавный скролл
  */
 html,
 :has(:target) {
   scroll-behavior: smooth;
 }
 
 body {
   /**
     Пригодится в большинстве ситуаций
     (когда, например, нужно будет "прижать" футер к низу сайта)
    */
   min-height: 100%;
   /**
     Унифицированный интерлиньяж
    */
   line-height: 1.5;
 }
 
 /**
   Нормализация высоты элемента ссылки при его инспектировании в DevTools
  */
 a:where([class]) {
   display: inline-flex;
 }
 
 /**
   Курсор-рука при наведении на элемент
  */
 button,
 label {
   cursor: pointer;
 }
 
 /**
   Приводим к единому цвету svg-элементы
   (за исключением тех, у которых уже указан
   атрибут fill со значением 'none' или начинается с 'url')
  */
 :where([fill]:not(
   [fill="none"],
   [fill^="url"]
 )) {
   fill: currentColor;
 }
 
 /**
   Приводим к единому цвету svg-элементы
   (за исключением тех, у которых уже указан
   атрибут stroke со значением 'none')
  */
 :where([stroke]:not(
   [stroke="none"],
   [stroke^="url"]
 )) {
   stroke: currentColor;
 }
 
 /**
   Чиним баг задержки смены цвета при взаимодействии с svg-элементами
  */
 svg * {
   transition-property: fill, stroke;
 }
 
 /**
   Приведение рамок таблиц в классический 'collapse' вид
  */
 :where(table) {
   border-collapse: collapse;
   border-color: currentColor;
 }
 
 /**
   Удаляем все анимации и переходы для людей,
   которые предпочитают их не использовать
  */
 @media (prefers-reduced-motion: reduce) {
   *,
   ::before,
   ::after {
     animation-duration: 0.01ms !important;
     animation-iteration-count: 1 !important;
     transition-duration: 0.01ms !important;
     scroll-behavior: auto !important;
   }
 }
 :root {
    --color-dark: #2B2B2B;
    --color-yellow: #FFDD72;
    --color-light:#FFFFFF;
    --color-purple: #763F94;
    --color-purple-light: #E9BFFF;
    --color-gray: #717171;
    --color-orange: #FFC700;
    --border-radius: 32px;
    --border: 1px solid var(--color-dark);
    --font-family-base: 'Unbouded', sans-serif;
    --font-family-accent: 'Coolvetica', 'Nexa Script', sans-serif;
    --input-height: 53px;
    --container-width: 1800px;
    --container-padding-x: 15px;
    --transition-duration: 0.2s;
 }
a,
button,
input,
textarea,
svg * {
    transition-duration: var(--transition-duration);
}

a {
    color: var(--color-dark);
 }
a:hover {
    color: var(--color-gray);
}
.btn {
    display: inline-flex;
    height: 54px;
    background-color: var(--color-yellow);
    text-decoration: none;
    border: var(--border);
    border-radius: var(--border-radius);
    padding: 9px 12px;
    font-weight: 700;
    margin-top: 10px;
}

 body {
    font-family: var(--font-family-base);
    font-weight: 400;
    font-size: 24px;
    color: var(--color-dark);
    background: radial-gradient(circle, rgba(255,235,170,1) 0%, rgba(255,255,255,1) 0%, rgba(255,235,170,1) 100%);
 }

 .container {
 max-width: calc(var(--container-width) + var(--container-padding-x) * 2);
 margin-inline: auto;
 padding-inline: var(--container-padding-x);
 }

 h1,h2,h3,h4,h5,h6 {
    font-weight: 500;
 }

 .header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    column-gap: 20px;
    padding-inline: 60px;
    flex-wrap: wrap;
 }
 .header-menu-list {
    display: flex;
    column-gap: 50px;
 }
 .header-menu-link {
    display: inline-flex;
    align-items: center;
    height: 30px;
    padding-bottom: 8px;
    text-decoration: none;
    font-weight: 400;
    font-size: 20px;
 }
 .header-menu-link.is-current {
    border-bottom: var(--border);
     }
.header-menu-link:not(.is-current):hover {
    border-bottom: var(--border);
     }
     
     .btn {
        display: inline-block;
        transition: transform 0.5s ease;
      }
     .btn:hover {
        background-color: var(--color-orange);
        transform: scale(1.1);
     }
     .btn:active {
        transform: scale(0.98);
        background-color: var(--color-yellow);
        transition: transform 0.5s ease;
     }
     .header-logo img {
        padding-top: 15px;
       }

       @media (max-width: 1300px) {
        .header {
            flex-wrap: wrap;
            row-gap: 10px;
            padding-top: 20px;
            padding-inline: 15px;
        }
        .header-menu {
            order: 1;
            flex-basis: 100%;
            padding-inline: 10px;
          }
       }
       @media (max-width: 650px) {
        .header {
            padding-top: 5px;
        }
        .header-menu-link {
            height: 10px;
            font-size: 15px;
        }
        .header-menu-list {
            column-gap: 20px;
        }
         .btn {
            padding: 5px 8px;
            font-size: 14px;
            height: 30px;
         }
         .header-logo img {
            width: 150px;
            height: 50px;
         }
       }